#include <WiFi.h>
#include <HTTPClient.h>
#include "driver/i2s.h"
#include "time.h"

// --- Wi-Fi 및 서버 정보 ---
const char* ssid = "AtoZ_LAB";       // 와이파이 SSID
const char* password = "atoz9897!"; // 와이파이 비밀번호
const char* serverName = "192.168.219.106";
const int serverPort = 8080;
const char* uploadUrl = "/FarmData/fileUpload.do";

// --- 장치 ID 및 시간 설정 ---
const char* farmDeviceId = "PKJDEVICE_S3_PRO";
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 9 * 3600;
const int   daylightOffset_sec = 0;

// --- I2S 및 오디오 설정 ---
#define I2S_WS 41
#define I2S_SD 42
#define I2S_SCK 40
#define I2S_PORT I2S_NUM_0

const int SAMPLE_RATE = 16000;
const int BIT_DEPTH = 16;
const int RECORD_SECONDS = 30;

const int WAV_HEADER_SIZE = 44;
const int AUDIO_BUFFER_SIZE = RECORD_SECONDS * SAMPLE_RATE * (BIT_DEPTH / 8);

int16_t* audio_buffer = NULL;

// 함수 선언
void initI2S();
void createWavHeader(byte* header, int wavDataSize);
String getCurrentDateTime();
void recordToPSRAM();
void uploadFromPSRAM();

HTTPClient http;

void setup() {
  Serial.begin(115200);
  delay(1000); 
  Serial.println("\n--- LOLIN S3 Pro Audio Uploader (v2) ---");

  if (!psramInit()) {
    Serial.println("PSRAM initialization failed!");
    while(1);
  }
  Serial.printf("PSRAM initialized. Total PSRAM: %d bytes\n", ESP.getPsramSize());

  Serial.printf("Attempting to allocate %d bytes for audio buffer in PSRAM...\n", AUDIO_BUFFER_SIZE);
  audio_buffer = (int16_t*)ps_malloc(AUDIO_BUFFER_SIZE);
  if (audio_buffer == NULL) {
    Serial.println("Failed to allocate memory in PSRAM!");
    while(1);
  }
  Serial.println("PSRAM buffer allocated successfully.");

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) { delay(500); Serial.print("."); }
  Serial.println("\nWiFi connected! IP: " + WiFi.localIP().toString());
  
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.println("NTP time configured.");

  // ==================== 충돌 방지를 위한 Delay 추가 ====================
  // 네트워크 작업이 안정화될 시간을 줍니다.
  delay(1000); 
  // =================================================================

  initI2S();
  Serial.println("I2S Initialized.");
  Serial.println("--- Board setup finished ---");
}

void loop() {
  Serial.println("\n===================================");
  Serial.printf("New cycle starting... Will record for %d seconds.\n", RECORD_SECONDS);
  
  recordToPSRAM();
  uploadFromPSRAM();

  Serial.println("Cycle finished. Waiting 30 seconds.");
  delay(30000);
}

void recordToPSRAM() {
  Serial.printf("Starting %d-second recording into PSRAM...\n", RECORD_SECONDS);
  
  i2s_start(I2S_PORT);
  
  size_t total_bytes_written = 0;
  const int i2s_buffer_size = 4096;
  int8_t* i2s_read_buffer = (int8_t*)malloc(i2s_buffer_size);

  while (total_bytes_written < AUDIO_BUFFER_SIZE) {
    size_t bytes_read = 0;
    i2s_read(I2S_PORT, i2s_read_buffer, i2s_buffer_size, &bytes_read, portMAX_DELAY);
    
    for (int i = 0; i < bytes_read / 4; i++) {
      if (total_bytes_written < AUDIO_BUFFER_SIZE) {
        int32_t sample32 = ((int32_t*)i2s_read_buffer)[i];
        audio_buffer[total_bytes_written / 2] = (int16_t)(sample32 >> 16);
        total_bytes_written += 2;
      } else {
        break;
      }
    }
  }
  free(i2s_read_buffer);
  i2s_stop(I2S_PORT);
  Serial.println("...Recording finished.");
}

void uploadFromPSRAM() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("[ERROR] WiFi not connected. Aborting upload.");
    return;
  }
  
  Serial.println("Starting upload from PSRAM...");
  String apiUrl = "http://" + String(serverName) + ":" + String(serverPort) + String(uploadUrl);
  
  http.begin(apiUrl);
  
  String boundary = "----WebKitFormBoundary7MA4YWxkTrZu0gW";
  http.addHeader("Content-Type", "multipart/form-data; boundary=" + boundary);
  http.addHeader("Cookie", "JSESSIONID=A205E912E266CD975B8AFF3FC2633963"); // 여기에 최신 쿠키 값 입력!
  http.addHeader("User-Agent", "Mozilla/5.0");
  http.addHeader("Referer", "http://" + String(serverName) + ":" + String(serverPort) + "/FarmData/fileWrite.do");

  byte wavHeader[WAV_HEADER_SIZE];
  createWavHeader(wavHeader, AUDIO_BUFFER_SIZE);

  String head = "--" + boundary + "\r\n" + "Content-Disposition: form-data; name=\"i\"\r\n\r\n" + String(farmDeviceId) + "\r\n";
  head += "--" + boundary + "\r\n" + "Content-Disposition: form-data; name=\"d\"\r\n\r\n" + getCurrentDateTime() + "\r\n";
  head += "--" + boundary + "\r\n" + "Content-Disposition: form-data; name=\"awfile\"; filename=\"audio.wav\"\r\n" + "Content-Type: audio/wav\r\n\r\n";
  String tail = "\r\n--" + boundary + "--\r\n";

  size_t totalLen = head.length() + WAV_HEADER_SIZE + AUDIO_BUFFER_SIZE + tail.length();
  
  http.addHeader("Content-Length", String(totalLen));

  WiFiClient* client = http.getStreamPtr();
  if(!client) {
      Serial.println("[ERROR] Failed to get client stream.");
      http.end();
      return;
  }

  // 스트림으로 Body 전송
  Serial.println("Sending data... (Response will not be checked)");
  client->print(head);
  client->write(wavHeader, WAV_HEADER_SIZE);
  client->write((uint8_t*)audio_buffer, AUDIO_BUFFER_SIZE);
  client->print(tail);
  
  // ==================== 응답 확인 로직 제거 ====================
  // 데이터를 보낸 후, 응답을 기다리지 않고 바로 연결을 종료합니다.
  http.end();
  Serial.println("Data sent. Connection closed.");
  // =========================================================
}
// initI2S, createWavHeader, getCurrentDateTime 함수는 이전과 동일
void initI2S() {
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),.sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,.channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,.intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,.dma_buf_len = 64,.use_apll = false };
  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
  const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,.ws_io_num = I2S_WS,
    .data_out_num = I2S_PIN_NO_CHANGE,.data_in_num = I2S_SD };
  i2s_set_pin(I2S_PORT, &pin_config);
}
void createWavHeader(byte* header, int wavDataSize) {
  header[0] = 'R'; header[1] = 'I'; header[2] = 'F'; header[3] = 'F';
  unsigned int fileSize = wavDataSize + WAV_HEADER_SIZE - 8;
  header[4] = (byte)(fileSize & 0xFF); header[5] = (byte)((fileSize >> 8) & 0xFF); header[6] = (byte)((fileSize >> 16) & 0xFF); header[7] = (byte)((fileSize >> 24) & 0xFF);
  header[8] = 'W'; header[9] = 'A'; header[10] = 'V'; header[11] = 'E'; header[12] = 'f'; header[13] = 'm'; header[14] = 't'; header[15] = ' ';
  header[16] = 16; header[17] = 0; header[18] = 0; header[19] = 0; header[20] = 1; header[21] = 0; header[22] = 1; header[23] = 0;
  unsigned int sampleRate = SAMPLE_RATE;
  header[24] = (byte)(sampleRate & 0xFF); header[25] = (byte)((sampleRate >> 8) & 0xFF); header[26] = (byte)((sampleRate >> 16) & 0xFF); header[27] = (byte)((sampleRate >> 24) & 0xFF);
  unsigned int byteRate = SAMPLE_RATE * 1 * (BIT_DEPTH / 8);
  header[28] = (byte)(byteRate & 0xFF); header[29] = (byte)((byteRate >> 8) & 0xFF); header[30] = (byte)((byteRate >> 16) & 0xFF); header[31] = (byte)((byteRate >> 24) & 0xFF);
  header[32] = (1 * (BIT_DEPTH / 8)); header[33] = 0; header[34] = BIT_DEPTH; header[35] = 0;
  header[36] = 'd'; header[37] = 'a'; header[38] = 't'; header[39] = 'a';
  header[40] = (byte)(wavDataSize & 0xFF); header[41] = (byte)((wavDataSize >> 8) & 0xFF); header[42] = (byte)((wavDataSize >> 16) & 0xFF); header[43] = (byte)((wavDataSize >> 24) & 0xFF);
}
String getCurrentDateTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) { return "20250101000000"; }
  char timeString[15];
  strftime(timeString, sizeof(timeString), "%Y%m%d%H%M%S", &timeinfo);
  return String(timeString);
}