#include <Arduino.h>
#include "driver/i2s.h"
#include <WiFi.h>
#include <WebServer.h>

// --- Wi-Fi 설정 ---
const char* ssid = "AtoZ_LAB";       // 여기에 사용하는 Wi-Fi SSID를 입력하세요.
const char* password = "atoz9897!"; // 여기에 Wi-Fi 비밀번호를 입력하세요.

// --- I2S 및 오디오 설정 ---
#define I2S_WS_PIN   41  // Word Select
#define I2S_SD_PIN   42  // Serial Data
#define I2S_SCK_PIN  40  // Serial Clock
#define I2S_PORT     I2S_NUM_0

const int SAMPLE_RATE = 16000;
const int BIT_DEPTH = 16;
const int NUM_CHANNELS = 1;
const int RECORD_SECONDS = 30;

const int WAV_HEADER_SIZE = 44;
const uint32_t AUDIO_DATA_SIZE = RECORD_SECONDS * SAMPLE_RATE * NUM_CHANNELS * (BIT_DEPTH / 8);

int16_t* audio_buffer_psram = NULL;
byte wav_header[WAV_HEADER_SIZE];
WebServer server(80); // 웹 서버 객체

// --- WAV 파일 다운로드 처리 함수 ---
void handleWavDownload() {
  Serial.println("Web client connected, starting to stream WAV file...");

  // 1. 브라우저에 파일 이름과 총 크기를 알려주는 헤더를 설정합니다.
  server.sendHeader("Content-Disposition", "attachment; filename=recording.wav");
  server.setContentLength(WAV_HEADER_SIZE + AUDIO_DATA_SIZE);
  
  // 2. HTTP 상태 코드(200 OK)와 데이터 타입(audio/wav)을 먼저 보냅니다.
  //    이때 마지막 인자를 비워두면, 연결을 끊지 않고 내용(body)을 보낼 준비를 합니다.
  server.send(200, "audio/wav", ""); 

  //    44바이트의 WAV 헤더전송
  WiFiClient client = server.client();
  client.write((const char*)wav_header, WAV_HEADER_SIZE);

  //    PSRAM에 저장된 오디오 데이터 전송
  client.write((const char*)audio_buffer_psram, AUDIO_DATA_SIZE);
  
  Serial.println("WAV file streaming finished.");
}

void initI2S() {
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,
    .dma_buf_len = 256,
    .use_apll = false,
    .tx_desc_auto_clear = false,
    .fixed_mclk = 0
  };
  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
  const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK_PIN,
    .ws_io_num = I2S_WS_PIN,
    .data_out_num = I2S_PIN_NO_CHANGE,
    .data_in_num = I2S_SD_PIN
  };
  i2s_set_pin(I2S_PORT, &pin_config);
}

void createWavHeader(byte* header, uint32_t audioDataSize) {
  uint32_t fileSize = audioDataSize + WAV_HEADER_SIZE - 8;
  uint32_t byteRate = SAMPLE_RATE * NUM_CHANNELS * (BIT_DEPTH / 8);
  uint16_t blockAlign = NUM_CHANNELS * (BIT_DEPTH / 8);

  header[0] = 'R'; header[1] = 'I'; header[2] = 'F'; header[3] = 'F';
  header[4] = (byte)(fileSize & 0xFF);
  header[5] = (byte)((fileSize >> 8) & 0xFF);
  header[6] = (byte)((fileSize >> 16) & 0xFF);
  header[7] = (byte)((fileSize >> 24) & 0xFF);
  header[8] = 'W'; header[9] = 'A'; header[10] = 'V'; header[11] = 'E';
  header[12] = 'f'; header[13] = 'm'; header[14] = 't'; header[15] = ' ';
  header[16] = 16; header[17] = 0; header[18] = 0; header[19] = 0;
  header[20] = 1; header[21] = 0;
  header[22] = NUM_CHANNELS; header[23] = 0;
  header[24] = (byte)(SAMPLE_RATE & 0xFF);
  header[25] = (byte)((SAMPLE_RATE >> 8) & 0xFF);
  header[26] = (byte)((SAMPLE_RATE >> 16) & 0xFF);
  header[27] = (byte)((SAMPLE_RATE >> 24) & 0xFF);
  header[28] = (byte)(byteRate & 0xFF);
  header[29] = (byte)((byteRate >> 8) & 0xFF);
  header[30] = (byte)((byteRate >> 16) & 0xFF);
  header[31] = (byte)((byteRate >> 24) & 0xFF);
  header[32] = blockAlign; header[33] = 0;
  header[34] = BIT_DEPTH; header[35] = 0;
  header[36] = 'd'; header[37] = 'a'; header[38] = 't'; header[39] = 'a';
  header[40] = (byte)(audioDataSize & 0xFF);
  header[41] = (byte)((audioDataSize >> 8) & 0xFF);
  header[42] = (byte)((audioDataSize >> 16) & 0xFF);
  header[43] = (byte)((audioDataSize >> 24) & 0xFF);
}

void recordAudio() {
  if (audio_buffer_psram == NULL) {
    Serial.println("PSRAM buffer not allocated!");
    return;
  }
  Serial.printf("Starting %d seconds recording...\n", RECORD_SECONDS);
  i2s_start(I2S_PORT);
  size_t total_bytes_written_to_psram = 0;
  const int i2s_read_buffer_size = 4096;
  int8_t* i2s_read_buffer = (int8_t*)malloc(i2s_read_buffer_size);
  if(i2s_read_buffer == NULL){
    Serial.println("Failed to allocate I2S read buffer!");
    return;
  }
  while (total_bytes_written_to_psram < AUDIO_DATA_SIZE) {
    size_t bytes_read_from_i2s = 0;
    esp_err_t err = i2s_read(I2S_PORT, i2s_read_buffer, i2s_read_buffer_size, &bytes_read_from_i2s, pdMS_TO_TICKS(1000));
    if (err != ESP_OK) {
        Serial.printf("I2S read error: %d\n", err);
        continue;
    }
    if (bytes_read_from_i2s > 0) {
      int samples_to_process = bytes_read_from_i2s / 4;
      for (int i = 0; i < samples_to_process; i++) {
        if (total_bytes_written_to_psram < AUDIO_DATA_SIZE) {
          int32_t sample32 = ((int32_t*)i2s_read_buffer)[i];
          audio_buffer_psram[total_bytes_written_to_psram / 2] = (int16_t)(sample32 >> 16);
          total_bytes_written_to_psram += 2;
        } else {
          break;
        }
      }
    }
  }
  i2s_stop(I2S_PORT);
  free(i2s_read_buffer);
  Serial.println("Recording finished.");
  Serial.printf("Total bytes written to PSRAM buffer: %u / %u\n", total_bytes_written_to_psram, AUDIO_DATA_SIZE);
}

void printWavInfo() {
  if (audio_buffer_psram == NULL) {
    Serial.println("No audio data in PSRAM to create WAV header.");
    return;
  }
  createWavHeader(wav_header, AUDIO_DATA_SIZE);
  Serial.println("\n--- WAV Header (first 12 bytes) ---");
  for(int i = 0; i < 12; i++) { Serial.printf("%02X ", wav_header[i]); }
  Serial.println("\n-----------------------------------");
}

void setup() {
  Serial.begin(115200);
  delay(1000); 
  Serial.println("\n--- LOLIN S3 Pro - PSRAM WAV Recording Test ---");

  // Wi-Fi 연결
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // PSRAM 초기화
  if (!psramInit()) {
    Serial.println("PSRAM initialization FAILED!");
    while(1);
  }
  Serial.printf("PSRAM initialized. Total PSRAM: %u bytes, Free PSRAM: %u bytes\n", ESP.getPsramSize(), ESP.getFreePsram());

  // PSRAM에 오디오 버퍼 할당
  Serial.printf("Attempting to allocate %u bytes for audio buffer in PSRAM...\n", AUDIO_DATA_SIZE);
  audio_buffer_psram = (int16_t*)ps_malloc(AUDIO_DATA_SIZE);
  if (audio_buffer_psram == NULL) {
    Serial.println("PSRAM buffer allocation FAILED!");
    while(1);
  }
  Serial.println("PSRAM audio buffer allocated successfully.");

  // I2S 초기화 및 녹음
  initI2S();
  Serial.println("I2S Initialized.");
  recordAudio();
  
  // WAV 정보 출력
  printWavInfo();

  // 웹 서버 설정
  server.on("/recording.wav", handleWavDownload); // 다운로드 주소 설정
  server.begin(); // 웹 서버 시작
  Serial.println("Web server started.");
  Serial.println("To download the file, open this URL in your browser:");
  Serial.printf("http://%s/recording.wav\n", WiFi.localIP().toString().c_str());

  Serial.println("\n--- Setup Finished ---");
}

void loop() {
  // 클라이언트의 요청을 계속 확인하고 처리합니다.
  server.handleClient(); 
}