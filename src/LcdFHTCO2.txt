#include <SPI.h>
#include <TFT_eSPI.h> // TFT_eSPI 라이브러리
#include "DHTesp.h"     // DHT 센서 라이브러리
#include <MQ135.h>
#include <MQUnifiedsensor.h>

//Definitions
#define board "LOLIN S3 PRO"
#define Voltage_Resolution 3.3
#define pin 2 //Analog input 0 of your arduino
#define type "MQ-135" //MQ135
#define ADC_Bit_Resolution 12 // For arduino UNO/MEGA/NANO
#define RatioMQ135CleanAir 0.6 //RS / R0 = 0.6ppm -> CO2
// --- TFT LCD 설정 ---
TFT_eSPI tft = TFT_eSPI(); // TFT 객체 생성

// --- DHT11 센서 설정 ---
#define DHTPIN 18       // DHT11 데이터 핀이 연결된 GPIO 번호
#define DHTTYPE DHTesp::DHT11  // DHT11 센서 타입
DHTesp dht;

// --- MQ-135 센서 설정 ---

MQUnifiedsensor MQ135(board, Voltage_Resolution, ADC_Bit_Resolution, pin, type);


void setup() {
  Serial.begin(115200);
  delay(5000);
  // TFT LCD 초기화
  tft.init();
  tft.setRotation(3); // 화면 방향 설정 (0:세로, 1:가로, 2:세로반전, 3:가로반전)
  tft.fillScreen(TFT_BLACK); // 배경색 검정
  tft.setTextColor(TFT_WHITE, TFT_BLACK); // 글자색 흰색, 배경색 검정
  tft.setTextSize(2); // 글자 크기

  // DHT11 센서 초기화
  dht.setup(DHTPIN, DHTTYPE);

  // MQ-135 핀 모드 설정
  pinMode(pin, INPUT);

  tft.setCursor(10, 10);
  tft.println("Sensor Readings:");
  
  // MQ-135 예열
  MQ135.setRegressionMethod(1);  // _PPM =  a*ratio^b (PPM 농도와 상수 값을 계산하기 위한 수학 모델 설정)

  MQ135.init();

  MQ135.setRL(20000);

  float R0 = 0;
  for (int i = 1; i <= 10; i++) {
    MQ135.update(); // 센서 값 업데이트
    R0 += MQ135.calibrate(RatioMQ135CleanAir);
    Serial.print(".");
    delay(1000);
  }
  R0 = R0 / 10.0; // 10회 측정값의 평균
  MQ135.setR0(R0);
  
  tft.setCursor(10, 180);
  tft.setTextSize(1);
  tft.setTextColor(TFT_YELLOW, TFT_BLACK);
  tft.println("Warming up...");
  delay(5000); // 간단한 예열 시간
  tft.fillRect(10, 180, 200, 10, TFT_BLACK); // 예열 메시지 지우기
  tft.setTextSize(2);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
}

void loop() {
  // --- DHT11 센서 값 읽기 ---
  float humidity = dht.getHumidity();
  float temperature_c = dht.getTemperature(); // 섭씨 온도
  // float temperature_f = dht.readTemperature(true); // 화씨 온도

  // 센서 값 읽기 성공 여부 확인
  if (isnan(humidity) || isnan(temperature_c)) {
    Serial.println("Failed to read from DHT sensor!");
    tft.setCursor(10, 40);
    tft.setTextColor(TFT_RED, TFT_BLACK);
    tft.println("DHT Error");
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
  } else {
    // LCD에 온도 표시
    tft.setCursor(10, 40);
    tft.printf("Temp: %.1f C  ", temperature_c); // 소수점 한자리까지

    // LCD에 습도 표시
    tft.setCursor(10, 70);
    tft.printf("Humi: %.1f %%  ", humidity); // 소수점 한자리까지
  }
  MQ135.update();                         // 데이터를 업데이트하면 arduino가 아날로그 핀의 전압을 읽습니다

  MQ135.setA(110.47); MQ135.setB(-2.862); // CO2 농도를 얻기위한 방정식 값 구성
  // --- MQ-135 센서 값 읽기 ---
  int mq135_analog_value = MQ135.readSensor();

  // LCD에 MQ-135 아날로그 값 표시 (또는 PPM 추정치)
  // 이 예제에서는 아날로그 값을 그대로 사용하고, 값에 따라 상대적인 공기질 상태를 표시합니다.
  // CO2 PPM으로 변환하려면 복잡한 계산과 보정이 필요합니다.
  tft.setCursor(10, 100);
  tft.printf("ppm: %d   ", mq135_analog_value);

  tft.setTextColor(TFT_WHITE, TFT_BLACK); // 다음 출력을 위해 기본 색상으로 복원

  Serial.print("Temperature: ");
  Serial.print(temperature_c);
  Serial.print(" *C\t");
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print(" %\t");
  Serial.print("MQ-135 Analog: ");
  Serial.println(mq135_analog_value);

  delay(2000); // 2초마다 센서 값 업데이트
}